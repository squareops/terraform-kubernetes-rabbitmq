global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "${storage_class_name}"

image:
  registry: docker.io
  repository: bitnami/rabbitmq
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []

nameOverride: ""
fullnameOverride: ""

namespaceOverride: ""
kubeVersion: ""
clusterDomain: cluster.local
extraDeploy: []
commonAnnotations: {}
commonLabels: {}
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

hostAliases: []
dnsPolicy: ""
dnsConfig: {}
auth:
  username: ${rabbitmq_username}
  password: "${rabbitmq_password}"
  existingPasswordSecret: ""
  erlangCookie: "${erlangcookie_password}"
  existingErlangSecret: ""

  tls:
    enabled: false
    autoGenerated: false
    failIfNoPeerCert: true
    sslOptionsVerify: verify_peer
    caCertificate: |-
    serverCertificate: |-
    serverKey: |-
    existingSecret: ""
    existingSecretFullChain: false
logs: "-"
ulimitNofiles: "65536"
maxAvailableSchedulers: ""
onlineSchedulers: ""
memoryHighWatermark:
  enabled: false
  type: "relative"
  value: 0.4
  
plugins: "rabbitmq_management rabbitmq_peer_discovery_k8s"
communityPlugins: ""
extraPlugins: "rabbitmq_auth_backend_ldap"

clustering:
  enabled: true
  addressType: hostname
  rebalance: false
  forceBoot: true
  partitionHandling: autoheal

loadDefinition:
  enabled: false
  file: "/app/load_definition.json"
  existingSecret: ""

command: []
args: []
lifecycleHooks: {}
terminationGracePeriodSeconds: 120
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""

containerPorts:
  amqp: 5672
  amqpTls: 5671
  dist: 25672
  manager: 15672
  epmd: 4369
  metrics: 9419

extraContainerPorts: []

configuration: |-
  default_user = {{ .Values.auth.username }}
  default_pass = CHANGEME
  {{- if .Values.clustering.enabled }}
  cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
  cluster_formation.k8s.host = kubernetes.default
  cluster_formation.node_cleanup.interval = 10
  cluster_formation.node_cleanup.only_log_warning = true
  cluster_partition_handling = {{ .Values.clustering.partitionHandling }}
  {{- end }}
  {{- if .Values.loadDefinition.enabled }}
  load_definitions = {{ .Values.loadDefinition.file }}
  {{- end }}

  queue_master_locator = min-masters

  loopback_users.guest = false
  {{ tpl .Values.extraConfiguration . }}
  {{- if .Values.auth.tls.enabled }}
  ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
  listeners.ssl.default = {{ .Values.service.ports.amqpTls }}
  ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
  ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
  ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
  ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
  {{- end }}
  {{- if .Values.ldap.enabled }}
  auth_backends.1 = rabbit_auth_backend_ldap
  auth_backends.2 = internal
  {{- range $index, $server := .Values.ldap.servers }}
  auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
  {{- end }}
  auth_ldap.port = {{ .Values.ldap.port }}
  auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
  {{- if .Values.ldap.tls.enabled }}
  auth_ldap.use_ssl = true
  {{- end }}
  {{- end }}
  {{- if .Values.metrics.enabled }}

  prometheus.tcp.port = 9419
  {{- end }}
  {{- if .Values.memoryHighWatermark.enabled }}

  total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
  vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
  {{- end }}


extraConfiguration: |-
  #default_vhost = {{ .Release.Namespace }}-vhost
  #disk_free_limit.absolute = 50MB


advancedConfiguration: |-

ldap:
  enabled: false
  servers: []
  port: "389"
  user_dn_pattern: cn=$${username},dc=example,dc=org
  tls:
    enabled: false

extraVolumeMounts: []

extraVolumes: []

extraSecrets: {}

extraSecretsPrependReleaseName: false

replicaCount: ${replicacount}

schedulerName: ""
podManagementPolicy: OrderedReady

podLabels: {}

podAnnotations:
    co.elastic.logs/enabled: "true"
    co.elastic.logs/module: rabbitmq

updateStrategy:
 
  type: RollingUpdate

statefulsetLabels: {}
priorityClassName: ""

podAffinityPreset: ""

podAntiAffinityPreset: soft

nodeAffinityPreset:

  type: ""
  key: ""
  values: []

affinity: {}
nodeSelector: {}
tolerations: []

topologySpreadConstraints: []

podSecurityContext:
  enabled: true
  fsGroup: 1001


containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true

resources:

  limits:
    cpu: 300m
    memory: 350Mi

  requests:
    cpu: 200m
    memory: 200Mi


livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 3
  successThreshold: 1


startupProbe:
  enabled: false
  initialDelaySeconds: 10
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 3
  successThreshold: 1

customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
initContainers: []
sidecars: []

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  annotations: {}

rbac:
  create: true

persistence:
  enabled: true
  storageClass: ""
  selector: {}
  accessModes:
    - ReadWriteOnce
  existingClaim: ""
  mountPath: /bitnami/rabbitmq/mnesia
  subPath: ""
  size: ${rabbitmq_volume_size}
  annotations: {}

service:
  type: ClusterIP
  portEnabled: true
  distPortEnabled: true
 
  managerPortEnabled: true
  epmdPortEnabled: true
  ports:
    amqp: 5672
    amqpTls: 5671
    dist: 25672
    manager: 15672
    metrics: 9419
    epmd: 4369

  portNames:
    amqp: "amqp"
    amqpTls: "amqp-ssl"
    dist: "dist"
    manager: "http-stats"
    metrics: "metrics"
    epmd: "epmd"

  nodePorts:
    amqp: ""
    amqpTls: ""
    dist: ""
    manager: ""
    epmd: ""
    metrics: ""
    
  extraPorts: []
  loadBalancerSourceRanges: []
  externalIPs: []
  externalTrafficPolicy: Cluster
  loadBalancerIP: ""
  clusterIP: ""
  labels: {}
  annotations: {}
  annotationsHeadless: {}
  sessionAffinity: None
  sessionAffinityConfig: {}
  
ingress:
  enabled: true
  path: /
  pathType: ImplementationSpecific
  hostname: ${hostname}
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/add-base-url: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
  tls: true
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraRules: []
  extraTls: []
  secrets: []
  ingressClassName: "nginx"
  
networkPolicy:
  enabled: false
  allowExternal: true
  additionalRules: []
  
metrics:
  enabled: ${rabbitmq_exporter_enabled}
  plugins: "rabbitmq_prometheus"
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.service.ports.metrics }}"
  serviceMonitor:
    enabled: true
    namespace: "${service_monitor_namespace}"
    interval: 30s
    scrapeTimeout: ""
    jobLabel: ""
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    targetLabels: {}
    podTargetLabels: {}
    path: ""
    selector: {}
    labels:
      release: prometheus-operator
    annotations: {}

  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []

volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r431
    pullPolicy: IfNotPresent
    pullSecrets: []

  resources:
    limits: {}
    requests: {}
